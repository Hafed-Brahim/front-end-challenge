{"version":3,"sources":["components/repo/repo.component.jsx","components/directory/directory.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Repo","name","description","avatarUrl","stars","issuses","login","createdAt","currentDate","Date","createdDate","slice","replace","diffTime","Math","abs","diffDays","ceil","className","src","Directory","repos","map","item","key","node_id","owner","avatar_url","stargazers_count","open_issues","created_at","App","useState","isLoading","setIsLoading","setRepos","page","setPage","useEffect","loadRepos","window","addEventListener","e","handleScroll","console","log","fetch","then","resp","json","data","items","reposlist","document","getElementsByClassName","lastRepo","length","lastRepoOffSet","offsetTop","clientHeight","pageYOffset","innerHeight","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAqCeA,G,MAjCF,SAAC,GAQP,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,YACAC,EAKI,EALJA,UACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,MACAC,EACI,EADJA,UAGMC,EAAc,IAAIC,KAClBC,EAAc,IAAID,KAAKF,EAAUI,MAAM,EAAG,IAAIC,QAAQ,KAAM,MAC5DC,EAAWC,KAAKC,IAAIP,EAAcE,GAClCM,EAAWF,KAAKG,KAAKJ,EAAQ,OAEnC,OACE,yBAAKK,UAAU,QACb,yBAAKA,UAAU,SAASC,IAAKhB,IAC7B,yBAAKe,UAAU,QACb,4BAAKjB,GACL,2BAAIC,GACJ,yBAAKgB,UAAU,SACb,wCAAcd,GACd,0CAAgBC,GAChB,sCACWW,EADX,gBACkCV,QCP7Bc,G,MAhBG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAClB,OACE,yBAAKH,UAAU,aACb,mDAGAG,EAAMC,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,QAASxB,KAAMsB,EAAKtB,KAAMC,YAAaqB,EAAKrB,YAAaC,UAAWoB,EAAKG,MAAMC,WACzFvB,MAAOmB,EAAKK,iBAAkBvB,QAASkB,EAAKM,YAAavB,MAAOiB,EAAKG,MAAMpB,MAC3EC,UAAWgB,EAAKO,mB,MC8DfC,MAvEf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEaF,mBAAS,IAFtB,mBAENX,EAFM,KAECc,EAFD,OAGWH,mBAAS,GAHpB,mBAGNI,EAHM,KAGAC,EAHA,KAKbC,qBAAU,WACRC,IAEAC,OAAOC,iBAAiB,UAAU,SAAAC,GAChCC,EAAaD,MAGfE,QAAQC,IAAI,aACX,CAACT,IAEJ,IAAMG,EAAY,WAEhBO,MAAM,+FAAD,OAC4FV,IAE9FW,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,IAAIC,EAAQD,EAAKC,MACjBP,QAAQC,IAAIxB,GACZc,EAAS,GAAD,mBAAKd,GAAL,YAAe8B,KACvBjB,GAAa,GACbU,QAAQC,IAAIxB,OASZsB,EAAe,WACnB,IAAIS,EAAYC,SAASC,uBAAuB,QAC5CC,EAAWH,EAAUA,EAAUI,OAAO,GACtCC,EAAiBF,EAASG,UAAYH,EAASI,aAClCnB,OAAOoB,YAAcpB,OAAOqB,YAC5BJ,GATjBpB,EAAQD,EAAK,IAcf,OACE,yBAAKlB,UAAU,OACZe,EACC,yBAAKf,UAAU,mBACb,yBAAKA,UAAU,eACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,gCAIJ,kBAAC,EAAD,CAAWG,MAAOA,MC3DNyC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.568c640d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./repo.styles.scss\";\r\n\r\nconst Repo = ({\r\n  name,\r\n  description,\r\n  avatarUrl,\r\n  stars,\r\n  issuses,\r\n  login,\r\n  createdAt\r\n}) => {\r\n\r\n  const currentDate = new Date();\r\n  const createdDate = new Date(createdAt.slice(0, 10).replace(/-/g, \"/\"));\r\n  const diffTime = Math.abs(currentDate - createdDate);\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  return (\r\n    <div className=\"repo\">\r\n      <img className=\"avatar\" src={avatarUrl}></img>\r\n      <div className=\"info\">\r\n        <h2>{name}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"stats\">\r\n          <span>stars: {stars}</span>\r\n          <span>Issuses: {issuses}</span>\r\n          <p>\r\n            Created {diffDays} days ago by {login}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Repo;\r\n","import React from \"react\";\r\n\r\nimport Repo from \"../repo/repo.component\";\r\n\r\nimport \"./directory.styles.scss\";\r\n\r\nconst Directory = ({repos}) => {\r\n  return (\r\n    <div className=\"directory\">\r\n      <h1>Github repositories</h1>\r\n\r\n      {\r\n      repos.map(item => (\r\n        <Repo key={item.node_id} name={item.name} description={item.description} avatarUrl={item.owner.avatar_url} \r\n              stars={item.stargazers_count} issuses={item.open_issues} login={item.owner.login}\r\n              createdAt={item.created_at}/>\r\n      ))}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Directory;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport Directory from \"./components/directory/directory.component\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [repos, setRepos] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    loadRepos();\n\n    window.addEventListener(\"scroll\", e => {\n      handleScroll(e);\n    });\n\n    console.log(\"mounted\");\n  }, [page]);\n\n  const loadRepos = () => {\n\n    fetch(\n      `https://api.github.com/search/repositories?q=created:>2019-12-11&sort=stars&order=desc&page=${page}`\n    )\n      .then(resp => resp.json()) \n      .then(data => {\n        let items = data.items;\n        console.log(repos);\n        setRepos([...repos, ...items]);\n        setIsLoading(false);\n        console.log(repos);\n      });\n  };\n\n  const loadMore = () => {\n    setPage(page+1);\n    // loadRepos();\n  }\n\n  const handleScroll = () => {\n    let reposlist = document.getElementsByClassName(\"repo\");\n    let lastRepo = reposlist[reposlist.length-1];\n    let lastRepoOffSet = lastRepo.offsetTop + lastRepo.clientHeight;\n    let pageOffset = window.pageYOffset + window.innerHeight;\n    if (pageOffset > lastRepoOffSet) {\n      loadMore();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {isLoading ? (\n        <div className=\"Spinner-overlay\">\n          <div className=\"lds-spinner\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </div>\n      ) : (\n        <Directory repos={repos} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}